diff --git a/src/components/flow/node.tsx b/src/components/flow/node.tsx
index 3ce9066..6e5339b 100644
--- a/src/components/flow/node.tsx
+++ b/src/components/flow/node.tsx
@@ -21,7 +21,7 @@ import {
   isBoolNodeEntryType, 
   isNumberNodeEntryType, 
   isNodeEntryTypeSupportInput 
-} from "@/data/guard";
+} from "@/data/data-guard";
 
 export const ErrorNode = (props: NodeProps<AFNode> & { error: string }) => {
   return (
diff --git a/src/data/assignable.ts b/src/data/assignable.ts
index 2e31df7..c774251 100644
--- a/src/data/assignable.ts
+++ b/src/data/assignable.ts
@@ -1,5 +1,5 @@
 import { NeverType, NormalizedArrayType, NormalizedBoolType, NormalizedDictType, NormalizedDictTypeKeys, NormalizedNDArrayType, NormalizedNodeEntryType, NormalizedNumberType, NormalizedPythonObjectType, NormalizedSimpleType, NormalizedStringType, NormalizedTorchTensorType, StringConstraint } from "./data-type";
-import { isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType, isSimpleArrayShape } from "./guard";
+import { isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType, isSimpleArrayShape } from "./data-guard";
 import { calcNodeEntryNumberTypeEnum, calcNodeEntryStringTypeEnum, isArrayShallowEquals, isValidNumberInNumberType, isValidStringByConstraint, isRangeInclude, isRangeIntersect, calcRangeIntersection } from "./utils";
 import { normalizeNodeEntryArrayType, normalizeNodeEntryNumberType, normalizeNodeEntryStringType, normalizeNodeEntryUnionType } from "./normalize";
 import { combineNodeEntryType } from "./combine";
diff --git a/src/data/combine.ts b/src/data/combine.ts
index 82460d0..1372824 100644
--- a/src/data/combine.ts
+++ b/src/data/combine.ts
@@ -1,6 +1,6 @@
 import { compareNodeEntryType } from "./compare";
 import type { NumberType, StringType, NormalizedArrayType, NormalizedDictType, NormalizedNodeEntryType, NormalizedNDArrayType, NormalizedTorchTensorType, PythonObjectType, NormalizedSimpleType, NormalizedUnionType, NormalizedNeverType, NormalizedStringType, NormalizedNumberType, NormalizedPythonObjectType, SimpleType, NormalizedBoolType, NormalizedDictTypeKeys } from "./data-type";
-import { isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType } from "./guard";
+import { isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType } from "./data-guard";
 import { calcNodeEntryNumberTypeEnum, calcNodeEntryStringTypeEnum, isRangeInclude } from "./utils";
 
 export function combineNodeEntryNumberType(a: NumberType, b: NumberType): NumberType | undefined {
diff --git a/src/data/compare.ts b/src/data/compare.ts
index 3c28430..e470441 100644
--- a/src/data/compare.ts
+++ b/src/data/compare.ts
@@ -1,5 +1,5 @@
 import type { NormalizedAnyType, NormalizedNumberType, NormalizedStringType, NormalizedBoolType, NormalizedArrayType, NormalizedArrayComplexType, NormalizedDictType, NormalizedNDArrayType, NormalizedTorchTensorType, NormalizedPythonObjectType, NormalizedUnionType, NormalizedNodeEntryType } from "./data-type";
-import { isSimpleArrayShape, isNormalizedUnionNodeEntryType } from "./guard";
+import { isSimpleArrayShape, isNormalizedUnionNodeEntryType } from "./data-guard";
 import { calcNodeEntryNumberTypeEnum, calcNodeEntryStringTypeEnum } from "./utils";
 
 // eslint-disable-next-line @typescript-eslint/no-unused-vars
diff --git a/src/data/data-type.d.ts b/src/data/data-type.d.ts
index 093d0f4..88a8d70 100644
--- a/src/data/data-type.d.ts
+++ b/src/data/data-type.d.ts
@@ -1,4 +1,5 @@
 import type { RecommandLevel } from './enum';
+import type { SubFlowState, TemplateRef } from './flow-type';
 
 export type NodeRuntime = 'frontend' | 'backend' | 'prefer-frontend' | 'prefer-backend' | 'not-care';
 export type NodeType = 'base';
@@ -140,11 +141,11 @@ export type NormalizedPythonObjectType = PythonObjectType;
 
 export type UnionType = NodeEntryType[];
 
-export type NodeEntryType = 
+export type NodeEntryType =
   AnyType
   | NeverType
   | StringType
-  | NumberType 
+  | NumberType
   | BoolType
   | ArrayType
   | DictType
@@ -155,9 +156,9 @@ export type NodeEntryType =
 
 export type SimpleType = Exclude<NodeEntryType, AnyType | NeverType | UnionType>;
 export type FlattenUnionType = SimpleType[];
-export type NormalizedSimpleType = 
+export type NormalizedSimpleType =
   NormalizedStringType
-  | NormalizedNumberType 
+  | NormalizedNumberType
   | NormalizedBoolType
   | NormalizedArrayType
   | NormalizedDictType
@@ -171,10 +172,10 @@ export type NormalizedUnionType = NormalizedSimpleType[];
 export type NormalizedNodeEntryType = NormalizedAnyType | NormalizedNeverType | NormalizedSimpleType | NormalizedUnionType;
 export type NormalizedNodeEntrySimpleTypeSupportInput =
   NormalizedStringType
-  | NormalizedNumberType 
+  | NormalizedNumberType
   | NormalizedBoolType;
 export type NormalizedNodeEntryComplexTypeSupportInput = NormalizedNodeEntrySimpleTypeSupportInput[];
-export type NormalizedNodeEntryTypeSupportInput = 
+export type NormalizedNodeEntryTypeSupportInput =
   NormalizedNodeEntrySimpleTypeSupportInput
   | NormalizedNodeEntryComplexTypeSupportInput;
 
@@ -190,34 +191,42 @@ export type NodeEntry = {
   };
 };
 
-export type NodeMeta = {
+type NodeMetaBase = {
   id: string;
-  version: string;
+  version?: string;
   title: string;
-  type: NodeType;
-  native: boolean;
-  impl?: string;
-  runtime: NodeRuntime
-  verificationCode?: {
-    js?: string;
-    py?: string;
-  };
-  executionCode?: {
-    js?: string;
-    py?: string;
-  };
-  evalTypeCode?: {
-    js?: string;
-    py?: string;
-  };
+};
+
+export type Code = {
+  code: string;
+}
+
+export type CodeRef = {
+  ref: string;
+}
+
+export type NativeNodeMeta = NodeMetaBase & {
+  type: 'native';
+  impls: {
+    [language: string]: Code | CodeRef;
+  }
+  checks?: Code | CodeRef;
+  types?: Code | CodeRef;
   inputs: NodeEntry[];
   outputs: NodeEntry[];
-  defaultRenderer: string;
 };
 
+export type CompoundNodeMeta = NodeMetaBase & {
+  type: 'compound';
+  flow: SubFlowState;
+  template?: TemplateRef;
+};
+
+export type NodeMeta = NativeNodeMeta | CompoundNodeMeta;
+
 export type NodeMetaRef = {
   id: string;
-  version: string;
+  version?: string;
 };
 
 export type NodeEntryConfig = {
@@ -238,16 +247,75 @@ export type NodeEntryData = {
   config: NodeEntryConfig;
 }
 
-export type NodeData = {
+export type NodeDataBase = {
+  id: string;
+}
+
+export type StartNodeData = NodeDataBase & {
+  type: 'start';
+}
+
+export type EndNodeData = NodeDataBase & {
+  type: 'end';
+}
+
+export type InputsNodeData = NodeDataBase & {
+  type: 'inputs';
+};
+
+export type OutputsNodeData = NodeDataBase & {
+  type: 'outputs';
+};
+
+export type IfNodeData = NodeDataBase & {
+  type: 'if';
+};
+
+export type SwitchNodeData = NodeDataBase & {
+  type: 'switch';
+};
+
+export type AssignNodeData = NodeDataBase & {
+  type: 'assign';
+};
+
+export type PlaceholderNodeData = NodeDataBase & {
+  type: 'placeholder';
+};
+
+export type TemplateData = {
+  nodes: (GeneralNodeData | TemplateNodeData)[];
+  edges: EdgeData[];
+};
+
+export type SubFlowData = {
+  nodes: (GeneralNodeData | SubFlowNodeData)[];
+  edges: EdgeData[];
+};
+
+export type BaseNodeData = NodeDataBase & {
+  type: 'base';
   meta: NodeMetaRef;
-  title?: string;
   collapsed: boolean;
-  nativeMode: NodeNativeMode;
-  renderer: string;
   inputs: NodeEntryData[];
   outputs: NodeEntryData[];
+  template?: TemplateData,
+  flow?: SubFlowData,
 };
 
+export type GeneralNodeData = StartNodeData
+  | EndNodeData
+  | IfNodeData 
+  | SwitchNodeData 
+  | AssignNodeData 
+  | BaseNodeData;
+
+export type SubFlowNodeData = InputsNodeData | OutputsNodeData;
+
+export type TemplateNodeData = PlaceholderNodeData;
+
+export type NodeData = GeneralNodeData | SubFlowNodeData | TemplateNodeData;
+
 export type EdgeData = {
   id: string;
   sourceNode: string;
diff --git a/src/data/flow-api.ts b/src/data/flow-api.ts
index 008fac6..bb36e45 100644
--- a/src/data/flow-api.ts
+++ b/src/data/flow-api.ts
@@ -1,4 +1,5 @@
 import { NodeMeta, NodeMetaRef } from "./data-type";
+import { isAppWorkspace } from "./flow-guard";
 import { AFNode, FlowState, WorkspaceState } from "./flow-type";
 import { getGlobalNodeMetas } from "./nodes";
 import { getTypeFromData } from "./utils";
@@ -21,7 +22,11 @@ function parsePathName(name: string): { id: string, version: string } {
 
 export function currentFlow(state: WorkspaceState): FlowState {
   if (state.path.length === 0) {
-    return state.main;
+    if (isAppWorkspace(state)) {
+      return state.main;
+    } else {
+      throw new Error('Lib workspace must have a path.');
+    }
   }
   const name = state.path[state.path.length - 1];
   const { id, version } = parsePathName(name);
diff --git a/src/data/flow-type.d.ts b/src/data/flow-type.d.ts
index bb42b1c..54294a7 100644
--- a/src/data/flow-type.d.ts
+++ b/src/data/flow-type.d.ts
@@ -1,28 +1,78 @@
 import type { Node as FlowNode, Edge as FlowEdge } from '@xyflow/react';
-import { NodeData } from './data-type';
+import type { GeneralNodeData, SubFlowNodeData, TemplateNodeData, NodeMeta, NodeEntry, EdgeData } from './data-type';
 
 export type AFNodeType = string;
-export type AFNodeData = NodeData;
-export type AFNode = FlowNode<AFNodeData, AFNodeType>;
+export type AFGeneralNodeData = GeneralNodeData;
+export type AFSubFlowNodeData = GeneralNodeData | SubFlowNodeData;
+export type AFTemplateNodeData = GeneralNodeData | TemplateNodeData;
+export type AFNodeData = AFGeneralNodeData | AFSubFlowNodeData | AFTemplateNodeData;
+export type AFGeneralNode = FlowNode<AFGeneralNodeData, AFNodeType>;
+export type AFSubFlowNode = FlowNode<AFSubFlowNodeData, AFNodeType>;
+export type AFTemplateNode = FlowNode<AFTemplateNodeData, AFNodeType>;
+export type AFNode = AFGeneralNode | AFSubFlowNode | AFTemplateNode;
 export type AFEdgeType = undefined;
-export type AFEdgeData = undefined;
+export type AFEdgeData = EdgeData;
 export type AFEdge = FlowEdge<AFEdgeData, AFEdgeType>;
-export type FlowState = {
-  nodes: AFNode[];
+
+export type FlowType = 'main' | 'subflow' | 'template';
+
+type FlowStateBase = {
   edges: AFEdge[];
-};
-export type EmbeddedNodeImpl = {
-  meta: NodeMeta;
-  impl: FlowState;
 }
-export type WorkspaceState = {
+
+export type MainFlowState = FlowStateBase & {
+  type: 'main';
+  nodes: AFGeneralNode[];
+};
+
+export type SubFlowState = FlowStateBase & {
+  id: string;
+  type: 'subflow';
+  nodes: AFSubFlowNode[];
+  inputs: NodeEntry[];
+  outputs: NodeEntry[];
+};
+
+export type TemplateFlowState = FlowStateBase & {
+  id: string;
+  version?: string;
+  type: 'template';
+  nodes: AFTemplateNode[];
+  inputs: NodeEntry[];
+  outputs: NodeEntry[];
+};
+
+export type TemplateRef = {
+  id: string;
+  version?: string;
+};
+
+type WorkspaceStateBase = {
   id: string;
+  nextFlowId: number;
   nextNodeId: number;
   nextEdgeId: number;
   title: string;
   filePath: string;
-  main: FlowState;
-  embeddedFlows: EmbeddedNodeImpl[];
   path: string[];
   dirty: boolean;
+}
+
+export type AppWorkspaceState = WorkspaceStateBase & {
+  type: 'app';
+  main: MainFlowState;
+  nodes: NodeMeta[];
+  templates: TemplateFlowState[];
 };
+
+export type LibWorkspaceState = WorkspaceStateBase & {
+  type: 'lib';
+  namespace: string;
+  version: string;
+  exportNodes: string[];
+  exportTemplates: string[];
+  nodes: NodeMeta[];
+  templates: TemplateFlowState[];
+};
+
+export type WorkspaceState = AppWorkspaceState | LibWorkspaceState;
\ No newline at end of file
diff --git a/src/data/guard.ts b/src/data/guard.ts
deleted file mode 100644
index 3955c20..0000000
--- a/src/data/guard.ts
+++ /dev/null
@@ -1,92 +0,0 @@
-import type {
-  AnyType,
-  ArrayComplexShape,
-  ArraySimpleShape,
-  ArrayType, 
-  BoolType, 
-  DictType, 
-  NDArrayType, 
-  NeverType, 
-  NodeEntryType, 
-  NormalizedNodeEntryComplexTypeSupportInput, 
-  NormalizedNodeEntrySimpleTypeSupportInput, 
-  NormalizedNodeEntryType, 
-  NormalizedNodeEntryTypeSupportInput, 
-  NormalizedUnionType, 
-  NumberType, 
-  PythonObjectType, 
-  StringType, 
-  TorchTensorType, 
-  UnionType 
-} from "./data-type";
-
-export function isAnyNodeEntryType(type: NodeEntryType): type is AnyType {
-  return !Array.isArray(type) && type.name === 'any';
-}
-
-export function isNeverNodeEntryType(type: NodeEntryType): type is NeverType {
-  return !Array.isArray(type) && type.name === 'never';
-}
-
-export function isStringNodeEntryType(type: NodeEntryType): type is StringType {
-  return !Array.isArray(type) && type.name === 'string';
-}
-
-export function isNumberNodeEntryType(type: NodeEntryType): type is NumberType {
-  return !Array.isArray(type) && type.name === 'number';
-}
-
-export function isBoolNodeEntryType(type: NodeEntryType): type is BoolType {
-  return !Array.isArray(type) && type.name === 'bool';
-}
-
-export function isArrayNodeEntryType(type: NodeEntryType): type is ArrayType {
-  return !Array.isArray(type) && type.name === 'array';
-}
-
-export function isDictNodeEntryType(type: NodeEntryType): type is DictType {
-  return !Array.isArray(type) && type.name === 'dict';
-}
-
-export function isNDArrayNodeEntryType(type: NodeEntryType): type is NDArrayType {
-  return !Array.isArray(type) && type.name === 'ndarray';
-}
-
-export function isTorchTensorNodeEntryType(type: NodeEntryType): type is TorchTensorType {
-  return !Array.isArray(type) && type.name === 'torch-tensor';
-}
-
-export function isPythonObjectNodeEntryType(type: NodeEntryType): type is PythonObjectType {
-  return !Array.isArray(type) && type.name === 'python-object';
-}
-
-export function isUnionNodeEntryType(type: NodeEntryType): type is UnionType {
-  return Array.isArray(type);
-}
-
-export function isNormalizedUnionNodeEntryType(type: NormalizedNodeEntryType, strict: boolean = false): type is NormalizedUnionType {
-  return Array.isArray(type) && (!strict || type.length > 1);
-}
-
-export function isNodeEntrySimpleTypeSupportInput(type: NormalizedNodeEntryType): type is NormalizedNodeEntrySimpleTypeSupportInput {
-  return isStringNodeEntryType(type)
-    || isNumberNodeEntryType(type)
-    || isBoolNodeEntryType(type);
-}
-
-export function isNodeEntryComplexTypeSupportInput(type: NormalizedNodeEntryType): type is NormalizedNodeEntryComplexTypeSupportInput {
-  return isUnionNodeEntryType(type)
-    && type.every(isNodeEntrySimpleTypeSupportInput);
-}
-
-export function isNodeEntryTypeSupportInput(type: NormalizedNodeEntryType): type is NormalizedNodeEntryTypeSupportInput {
-  return isNodeEntrySimpleTypeSupportInput(type) || isNodeEntryComplexTypeSupportInput(type);
-}
-
-export function isSimpleArrayShape(shape: ArrayType['shape']): shape is ArraySimpleShape {
-  return Array.isArray(shape) && shape.length === 2 && typeof shape[1] === 'number';
-}
-
-export function isComplexArrayShape(shape: ArrayType['shape']): shape is ArrayComplexShape {
-  return Array.isArray(shape) && shape.length > 0 && !isSimpleArrayShape(shape);
-}
\ No newline at end of file
diff --git a/src/data/normalize.ts b/src/data/normalize.ts
index 6cc3f25..f9d698f 100644
--- a/src/data/normalize.ts
+++ b/src/data/normalize.ts
@@ -1,7 +1,7 @@
 import { combineNodeEntryUnionType } from "./combine";
 import { compareNodeEntryType } from "./compare";
 import type { StringType, ArrayType, NormalizedArrayType, DictType, NormalizedDictType, NormalizedNodeEntryType, UnionType, NormalizedAnyType, NormalizedNeverType, NormalizedSimpleType, NodeEntryType, NormalizedUnionType, NormalizedDictTypeKeys, NumberType, NormalizedNumberType, NormalizedStringType, BoolType, NormalizedBoolType, NormalizedNDArrayType, NDArrayType, TorchTensorType, NormalizedTorchTensorType, PythonObjectType, NormalizedPythonObjectType } from "./data-type";
-import { isSimpleArrayShape, isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType, isStringNodeEntryType, isNumberNodeEntryType, isBoolNodeEntryType, isArrayNodeEntryType, isDictNodeEntryType, isNDArrayNodeEntryType, isTorchTensorNodeEntryType, isPythonObjectNodeEntryType, isUnionNodeEntryType, isComplexArrayShape } from "./guard";
+import { isSimpleArrayShape, isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType, isStringNodeEntryType, isNumberNodeEntryType, isBoolNodeEntryType, isArrayNodeEntryType, isDictNodeEntryType, isNDArrayNodeEntryType, isTorchTensorNodeEntryType, isPythonObjectNodeEntryType, isUnionNodeEntryType, isComplexArrayShape } from "./data-guard";
 
 export function normalizeNodeEntryNumberType(type: NumberType): NormalizedNumberType {
   return type;
diff --git a/src/data/utils.ts b/src/data/utils.ts
index 4a52232..82108ab 100644
--- a/src/data/utils.ts
+++ b/src/data/utils.ts
@@ -12,6 +12,7 @@ import type {
   NormalizedDictType,
   NormalizedNumberType,
   StringConstraint,
+  NodeData,
 } from "./data-type";
 import type { AFNode } from "./flow-type";
 import {
@@ -26,7 +27,7 @@ import {
   isArrayNodeEntryType,
   isDictNodeEntryType,
   isNodeEntryTypeSupportInput
-} from "./guard";
+} from "./data-guard";
 import NDArray from "./ndarray";
 import TorchTensor from "./torch-tensor";
 import PythonObject from "./python-object";
@@ -298,6 +299,10 @@ export function getTypeFromData(data: any): NormalizedNodeEntryType {
   }
 }
 
+export function isNodeDataReady(data: NodeData): boolean {
+  return data.runtime !== undefined;
+}
+
 export type NodeEntryDataWithMeta = {
   meta: NodeEntry;
   runtime: NodeEntryRuntime;
diff --git a/src/data/validate.ts b/src/data/validate.ts
index 80662bc..32cc07a 100644
--- a/src/data/validate.ts
+++ b/src/data/validate.ts
@@ -1,6 +1,6 @@
 import { evaluate } from "@/lib/eval";
 import type { NodeData, NodeEntry, NodeEntryConfig, NodeEntryRuntime, NodeMeta, NormalizedArrayType, NormalizedBoolType, NormalizedDictType, NormalizedNDArrayType, NormalizedNodeEntryType, NormalizedNumberType, NormalizedPythonObjectType, NormalizedSimpleType, NormalizedStringType, NormalizedTorchTensorType } from "./data-type";
-import { isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType, isSimpleArrayShape } from "./guard";
+import { isAnyNodeEntryType, isNeverNodeEntryType, isNormalizedUnionNodeEntryType, isSimpleArrayShape } from "./data-guard";
 import NDArray from "./ndarray";
 import PythonObject from "./python-object";
 import TorchTensor from "./torch-tensor";
diff --git a/src/lib/slices/workspace-slice.ts b/src/lib/slices/workspace-slice.ts
index 07ac6a2..d984b55 100644
--- a/src/lib/slices/workspace-slice.ts
+++ b/src/lib/slices/workspace-slice.ts
@@ -20,7 +20,7 @@ import { useEffect } from 'react';
 import { 
   isNormalizedUnionNodeEntryType, 
   isNodeEntrySimpleTypeSupportInput 
-} from '@/data/guard';
+} from '@/data/data-guard';
 import { getNodeData } from '@/data/flow-api';
 
 export type EmbeddedNodeImpl = {
